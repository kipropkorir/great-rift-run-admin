generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Product {
  id          Int         @id @default(autoincrement())
  category    String
  name        String
  description String
  price       Float
  inStock     Int
  color       String?
  material    String?
  imageURL1   String?
  imageURL2   String?
  imageURL3   String?
  imageURL4   String?
  createdAt   DateTime    @default(now())
  deletedAt   DateTime?
  OrderItem   OrderItem[]
}

model Address {
  id             Int      @id @default(autoincrement())
  firstName      String
  lastName       String
  phone          String
  email          String
  city           String
  street         String
  house          String
  additionalInfo String?
  orderId        Int      @unique
  createdAt      DateTime @default(now())
  order          Order    @relation(fields: [orderId], references: [id])
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float
  size      String?
  capacity  String?
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId], map: "OrderItem_orderId_fkey")
  @@index([productId], map: "OrderItem_productId_fkey")
}

model Order {
  id            Int           @id @default(autoincrement())
  orderNumber   String        @unique
  subtotal      Float
  shippingCost  Float         @default(2000)
  totalAmount   Float
  paymentMethod String
  paymentStatus PaymentStatus @default(PENDING)
  orderProgress OrderProgress @default(PROCESSING)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  address       Address?
  items         OrderItem[]
  payment       Payment?
}

model Payment {
  id            Int           @id @default(autoincrement())
  orderId       Int           @unique
  amount        Float
  currency      String        @default("KES")
  transactionId String?       @unique
  merchantRef   String?       @unique
  status        PaymentStatus
  paymentDate   DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  order         Order         @relation(fields: [orderId], references: [id])
}

model Blog {
  id        Int      @id @default(autoincrement())
  title     String
  content   String   @db.LongText
  thumbnail String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contact {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  phone     String
  subject   String
  message   String
  createdAt DateTime @default(now())
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  CANCELLED
}

enum OrderProgress {
  PROCESSING
  INTRANSIT
  READY_FOR_PICKUP
  COMPLETED
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// Product Model (Managed by admin system)
model Product {
    id          Int      @id @default(autoincrement())
    category    String
    name        String
    description String
    price       Float
    inStock     Int
    color       String?
    material    String?
    imageURL1   String?
    imageURL2   String?
    imageURL3   String?
    imageURL4   String?
    createdAt   DateTime @default(now())
    deletedAt   DateTime? // Add this field for soft delete
    OrderItem   OrderItem[]
}

// Customer shipping details
model Address {
    id              Int      @id @default(autoincrement())
    firstName       String
    lastName        String
    phone           String
    email           String
    city            String
    street          String
    house           String
    additionalInfo  String?
    order           Order    @relation(fields: [orderId], references: [id])
    orderId         Int      @unique  // One address per order
    createdAt       DateTime @default(now())
}

// Order items from cart
model OrderItem {
    id        Int     @id @default(autoincrement())
    order     Order   @relation(fields: [orderId], references: [id])
    orderId   Int
    product   Product @relation(fields: [productId], references: [id])
    productId Int
    quantity  Int
    price     Float
    size      String?
    capacity  String?  // For water products
}

// Main order model
model Order {
    id              Int         @id @default(autoincrement())
    orderNumber     String      @unique
    items           OrderItem[]
    address         Address?    // Relation to shipping details
    subtotal        Float
    shippingCost    Float       @default(2000)
    totalAmount     Float
    paymentMethod   String      // e.g., "pesapal"
    paymentStatus   PaymentStatus @default(PENDING)
    orderProgress   OrderProgress @default(PROCESSING) // Managed by admin
    payment         Payment?
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt
}

// Payment tracking
model Payment {
    id            Int           @id @default(autoincrement())
    order         Order         @relation(fields: [orderId], references: [id])
    orderId       Int          @unique
    amount        Float
    currency      String        @default("KES")
    transactionId String?       @unique    // From Pesapal
    merchantRef   String?       @unique    // Your reference to Pesapal
    status        PaymentStatus
    paymentDate   DateTime?
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt
}

enum PaymentStatus {
    PENDING
    PAID
    FAILED
    CANCELLED
}

enum OrderProgress {
    PROCESSING
    INTRANSIT
    READY_FOR_PICKUP
    COMPLETED
}

// Blog Model
model Blog {
  id          Int      @id @default(autoincrement())
  title       String
  content     String   @db.LongText
  thumbnail   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Contact {
  id      Int      @id @default(autoincrement())
  name    String
  email   String
  phone   String
  subject String
  message String
  createdAt DateTime @default(now())
}